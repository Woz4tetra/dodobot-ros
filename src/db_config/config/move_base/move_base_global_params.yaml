
base_global_planner: "global_planner/GlobalPlanner" # alternatives: navfn/NavfnROS, global_planner/GlobalPlanner, carrot_planner/CarrotPlanner, navigation_experimental/goal_passer
# base_global_planner: "goal_passer/GoalPasser"
# base_local_planner: "dwa_local_planner/DWAPlannerROS"
# base_local_planner: "base_local_planner/TrajectoryPlannerROS"
base_local_planner: "teb_local_planner/TebLocalPlannerROS"
recovery_behaviors:
  # - name: 'super_conservative_reset1'
  #   type: 'clear_costmap_recovery/ClearCostmapRecovery'
  # - name: 'conservative_reset1'
  #   type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'aggressive_reset1'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'clearing_rotation1'
    type: 'rotate_recovery/RotateRecovery'
  # - name: 'super_conservative_reset2'
  #   type: 'clear_costmap_recovery/ClearCostmapRecovery'
  # - name: 'conservative_reset2'
  #   type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'aggressive_reset2'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'clearing_rotation2'
    type: 'rotate_recovery/RotateRecovery'

super_conservative_reset1:
    reset_distance: 3.0
    layer_names: ["obstacle_layer"]
conservative_reset1:
    reset_distance: 1.5
    layer_names: ["obstacle_layer"]
aggressive_reset1:
    reset_distance: 0.0
    layer_names: ["obstacle_layer"]
super_conservative_reset2:
    reset_distance: 3.0
    layer_names: ["obstacle_layer"]
conservative_reset2:
    reset_distance: 1.5
    layer_names: ["obstacle_layer"]
aggressive_reset2:
    reset_distance: 0.0
    layer_names: ["obstacle_layer"]
# clearing_rotation1:
# clearing_rotation2:

# The rate in Hz at which to run the control loop and send velocity commands
# to the base.
controller_frequency: 5.0

# How long the planner will wait in seconds in an attempt to find a valid plan
# before space-clearing operations are performed.
planner_patience: 5.0

# How long the controller will wait in seconds without receiving a valid control
# before space-clearing operations are performed.
controller_patience: 15.0

# The distance away from the robot in meters beyond which obstacles will be
# cleared from the costmap when attempting to clear space in the map.
# Note, this parameter is only used when the default recovery behaviors are
# used for move_base.
conservative_reset_dist: 3.0

# Whether or not to enable the move_base recovery behaviors to attempt to
# clear out space.
recovery_behavior_enabled: true

# Determines whether or not the robot will attempt an in-place rotation when
# attempting to clear out space. Note: This parameter is only used when the
# default recovery behaviors are in use, meaning the user has not set the
# recovery_behaviors parameter to anything custom.
clearing_rotation_allowed: true

# Determines whether or not to shutdown the costmaps of the node when
# move_base is in an inactive state
shutdown_costmaps: true

# How long in seconds to allow for oscillation before executing recovery
# behaviors. A value of 0.0 corresponds to an infinite timeout.
oscillation_timeout: 0.0

# How far in meters the robot must move to be considered not to be oscillating.
# Moving this far resets the timer counting up to the ~oscillation_timeout
oscillation_distance: 0.25

# The rate in Hz at which to run the global planning loop. If the frequency is
# set to 0.0, the global planner will only run when a new goal is received or
# the local planner reports that its path is blocked.
planner_frequency: 1.0  # 1.0


# How many times to allow for planning retries before executing recovery
# behaviors. A value of -1.0 corresponds to an infinite retries.
max_planning_retries: -1
