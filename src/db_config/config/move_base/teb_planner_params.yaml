### teb_local_planner parameters ###
# Used if "teb_local_planner/TebLocalPlannerROS" is selected in
# base_local_planner in move_base global params.
# load with the namespace "TebLocalPlannerROS" in the launch file


## Robot Configuration Parameters ##

# Maximum translational acceleration of the robot in meters/sec^2
acc_lim_x: 1.0 # 0.5

# Maximum angular acceleration of the robot in radians/sec^2
acc_lim_theta: 5.0 # 0.5

# Maximum translational velocity of the robot in meters/sec
max_vel_x: 0.3  # 0.5 # max speed 0.69 m/s

# Maximum absolute translational velocity of the robot while driving
# backwards in meters/sec. See optimization parameter
# weight_kinematics_forward_drive
max_vel_x_backwards: 0.3  # 0.69

# Maximum angular velocity of the robot in radians/secThe following
# parameters are relevant only for carlike robots:
max_vel_theta: 3.0  # 6.0

## The following parameters are relevant only for holonomic robots:

# Minimum turning radius of a carlike robot (set to zero for a diff-
# drive robot).
min_turning_radius: 0.0 # 0.0

# The distance between the rear axle and the front axle. The value might
# be negative for back-wheeled robots (only required if cmd_angle_instead_rotvel is set to true).
wheelbase: 1.0 # 1.0


# Substitute the rotational velocity in the commanded velocity message
# by the corresponding steering angle [-pi/2,pi/2]. Note, changing the
# semantics of yaw rate depending on the application is not preferable.
# Here, it just complies with the inputs required by the stage
# simulator. Datatypes in ackermann_msgs are more appropriate, but are
# not supported by move_base. The local planner is not intended to send
# commands by itself.
# Note, reduce weight_kinematics_nh significantly in order to adjust the tradeoff
# between compliant longitudinal motion and non-compliant lateral motion
# (strafing).
cmd_angle_instead_rotvel: false # false

# Maximum strafing velocity of the robot (should be zero for non-
# holonomic robots!)
max_vel_y: 0.0 # 0.0

# Maximum strafing acceleration of the robot
acc_lim_y: 0.0 # 0.5


## The following parameters are relevant for the footprint model used for
## optimization (see Tutorial Obstacle Avoidance and Robot Footprint Model).
## New in version 0.3

# Specify the robot footprint model type used for optimization.
# Different types are "point", "circular", "line", "two_circles" and
# "polygon." The type of the model significantly influences the required
# computation time.
footprint_model/type: "polygon" # "point"

# This parameter is only relevant for type "circular". It contains the
# radius of the circle. The center of the circle is located at the
# robot's axis of rotation.
footprint_model/radius: 0.2 # 0.2

# This parameter is only relevant for type "line". It contains the start
# coordinates of the line segment.
footprint_model/line_start: [-0.3, 0.0] # [-0.3, 0.0]

# This parameter is only relevant for type "line". It contains the end
# coordinates of the line segment.
footprint_model/line_end: [0.3, 0.0] # [0.3, 0.0]

# This parameter is only relevant for type "two_circles". It describes
# how much the center of the front circle is shifted along the robot's
# x-axis. The robot's axis of rotation is assumed to be located at
# [0,0].
footprint_model/front_offset: 0.2 # 0.2

# This parameter is only relevant for type "two_circles". It contains
# the radius of front circle.
footprint_model/front_radius: 0.2 # 0.2

# This parameter is only relevant for type "two_circles". It describes
# how much the center of the rear circle is shifted along the robot's
# negative x-axis. The robot's axis of rotation is assumed to be located
# at [0,0].
footprint_model/rear_offset: 0.2 # 0.2

# This parameter is only relevant for type "two_circles". It contains
# the radius of rear circle.
footprint_model/rear_radius: 0.2 # 0.2

# This parameter is only relevant for type "polygon". It contains the
# list of polygon vertices (2d coordinates each). The polygon is always
# closed: do not repeat the first vertex at the end.
footprint_model/vertices: [[-0.1556, -0.12], [-0.1556, 0.12], [0.1894, 0.12], [0.1894, -0.12]] # [ [0.25,-0.05], [...], ...]

# If true, updates the footprint before checking trajectory feasibility
is_footprint_dynamic: false # false


## Goal Tolerance Parameters ##

# Allowed final euclidean distance to the goal position in meters
xy_goal_tolerance: 0.04 # 0.2

# Allowed final orientation error in radians
yaw_goal_tolerance: 0.05 # 0.2

# Remove the goal velocity constraint such that the robot can arrive at
# the goal with maximum speed
free_goal_vel: true # false

complete_global_plan: true  # true

## Trajectory Configuration Parameters ##

teb_autosize: True

# Desired temporal resolution of the trajectory (the trajectory is not
# fixed to dt_ref since the temporal resolution is part of the
# optimization, but the trajectory will be resized between iterations if
# dt_ref +-dt_hysteresis is violated.
dt_ref: 0.3 # 0.3

# Hysteresis for automatic resizing depending on the current temporal
# resolution, usually approx. 10% of dt_ref is recommended
dt_hysteresis: 0.1 # 0.1

# Minimum number of samples (should be always greater than 2)
min_samples: 3 # 3

# Overwrite orientation of local subgoals provided by the global planner
# (since they often provide only a 2D path)
global_plan_overwrite_orientation: true # true

# If positive, via-points are extrected from the global plan (path-following
# mode). The value determines the resolution of the reference path (min.
# separation between each two consecutive via-points along the global plan,
# if negative: disabled). Refer to parameter weight_viapoint for adjusting
# the intensity. New in version 0.4
global_plan_viapoint_sep: 0.05 # -0.1 (disabled)

# Specify the maximum length (cumulative Euclidean distances) of the
# subset of the global plan taken into account for optimization. The
# actual length is than determined by the logical conjunction of the
# local costmap size and this maximum bound. Set to zero or negative in
# order to deactivate this limitation.
max_global_plan_lookahead_dist: 1.0 # 3.0

# Reinitialize the trajectory if a previous goal is updated with a
# separation of more than the specified value in meters (skip hot-
# starting)
force_reinit_new_goal_dist: 1.0 # 1.0

# Specify up to which pose on the predicted plan the feasibility should
# be checked each sampling interval.
feasibility_check_no_poses: 5 # 4

# Publish planner feedback containing the full trajectory and a list of
# active obstacles (should be enabled only for evaluation or debugging).
# See list of publishers above.
publish_feedback: false # false

# Allows the planner to shrink the horizon temporary (50%) in case of
# automatically detected issues (e.g. infeasibility). Also see parameter
# shrink_horizon_min_duration.
shrink_horizon_backup: true # true

# If true, underlying trajectories might be initialized with backwards
# motions in case the goal is behind the start within the local costmap
# (this is only recommended if the robot is equipped with rear sensors).
allow_init_with_backwards_motion: false # false

# If true, the planner uses the exact arc length in velocity,
# acceleration and turning rate computations (-> increased cpu time),
# otherwise the Euclidean approximation is used.
exact_arc_length: false # false

# Specify minimum duration for the reduced horizon in case an infeasible
# trajectory is detected (refer to parameter shrink_horizon_backup in
# order to activate the reduced horizon mode).
shrink_horizon_min_duration: 10.0 # 10.0

# Minimum desired separation from obstacles in meters
min_obstacle_dist: 0.005 # 0.5

# Specify if obstacles of the local costmap should be taken into
# account. Each cell that is marked as obstacle is considered as a
# point-obstacle. Therefore do not choose a very small resolution of the
# costmap since it increases computation time. In future releases this
# circumstance is going to be addressed as well as providing an
# additional api for dynamic obstacles.
include_costmap_obstacles: true # true

# Limit the occupied local costmap obstacles taken into account for
# planning behind the robot (specify distance in meters).
costmap_obstacles_behind_robot_dist: 1.0 # 1.0

# Each obstacle position is attached to the closest pose on the
# trajectory in order to keep a distance. Additional neighbors can be
# taken into account as well. Note, this parameter might be removed in
# future versions, since the the obstacle association strategy has been
# modified in kinetic+. Refer to the parameter description of
# legacy_obstacle_association.
obstacle_poses_affected: 30 # 30

# Buffer zone around obstacles with non-zero penalty costs (should be
# larger than min_obstacle_dist in order to take effect). Also refer to
# the weight weight_inflation.
inflation_dist: 0.2 # 0.6

# If this parameter is set to true, the motion of obstacles with non-
# zero velocity (provided via user-supplied obstacles on topic
# ~/obstacles or obtained from the costmap_converter) is predicted and
# considered during optimization via a constant velocity model. New
include_dynamic_obstacles: false # false

# The strategy of connecting trajectory poses with obstacles for
# optimization has been modified (see changelog). You can switch to the
# old/previous strategy by setting this parameter to true. Old strategy:
# for each obstacle, find the nearest TEB pose; new strategy: for each
# teb pose, find only "relevant" obstacles.
legacy_obstacle_association: false # false

# The non-legacy obstacle association strategy tries to connect only
# relevant obstacles with the discretized trajectory during
# optimization. But all obstacles within a specifed distance are forced
# to be included (as a multiple of min_obstacle_dist). E.g. choose 2.0
# in order toenforce the consideration obstacles within a radius of
# 2.0*min_obstacle_dist. [This parameter is used only if parameter
# legacy_obstacle_association is false]
obstacle_association_force_inclusion_factor: 1.5 # 1.5

# See obstacle_association_force_inclusion_factor, but beyond a multiple
# of [value]*min_obstacle_dist all obstacles are ignored during
# optimization. Parameter obstacle_association_force_inclusion_factor is
# processed first. [This parameter is used only if parameter
# legacy_obstacle_association is false]The following parameters are
# relevant only if costmap_converter plugins are desired (see tutorial):
obstacle_association_cutoff_factor: 5 # 5

# Define plugin name in order to convert costmap cells to
# points/lines/polygons. Set an empty string to disable the conversion
# such that all cells are treated as point-obstacles.
costmap_converter_plugin: "" # ""

# If set to true, the costmap converter invokes its callback queue in a
# different thread.
costmap_converter_spin_thread: true # true

# Rate that defines how often the costmap_converter plugin processes the
# current costmap (the value should not be much higher than the costmap
# update rate) [in Hz].
costmap_converter_rate: 5.0 # 5.0


## Optimization Parameters ##

optimization_activate: true  # true
optimization_verbose: true  # false

# Number of actual solver iterations called in each outerloop iteration.
# See param no_outer_iterations.
no_inner_iterations: 5 # 5

# Each outerloop iteration automatically resizes the trajectory
# according to the desired temporal resolution dt_ref and invokes the
# internal optimizer (that performs no_inner_iterations). The total
# number of solver iterations in each planning cycle is therefore the
# product of both values.
no_outer_iterations: 4 # 4

# Add a small safety margin to penalty functions for hard-constraint
# approximations
penalty_epsilon: 0.1 # 0.1

# Optimization weight for satisfying the maximum allowed translational
# velocity
weight_max_vel_x: 2.0 # 2.0

# Optimization weight for satisfying the maximum allowed angular
# velocity
weight_max_vel_theta: 1.0 # 1.0

# Optimization weight for satisfying the maximum allowed translational
# acceleration
weight_acc_lim_x: 1.0 # 1.0

# Optimization weight for satisfying the maximum allowed angular
# acceleration
weight_acc_lim_theta: 1.0 # 1.0

# Optimization weight for satisfying the non-holonomic kinematics (this
# parameter must be high since the kinematics equation constitutes an
# equality constraint, even a value of 1000 does not imply a bad matrix
# condition due to small 'raw' cost values in comparison to other
# costs).
weight_kinematics_nh: 1000.0 # 1000.0

# Optimization weight for forcing the robot to choose only forward
# directions (positive transl. velocities). A small weight (e.g. 1.0)
# still allows driving backwards. A value around 1000 almost prevents
# backward driving (but cannot be guaranteed).
weight_kinematics_forward_drive: 1.0 # 1.0

# Optimization weight for enforcing a minimum turning radius (only for
# carlike robots).
weight_kinematics_turning_radius: 1.0 # 1.0

# Optimization weight for contracting the trajectory w.r.t
# transition/execution time
weight_optimaltime: 1.0 # 1.0

# Optimization weight for keeping a minimum distance from obstacles
weight_obstacle: 50.0 # 50.0

# Optimization weight for minimzing the distance to via-points (resp.
# reference path). New in version 0.4
weight_viapoint: 1.0 # 1.0

# Optimization weight for the inflation penalty (should be small).
weight_inflation: 0.1 # 0.1

# Some special weights (currently weight_obstacle) are repeatedly scaled
# by this factor in each outer TEB iteration (weight_new =
# weight_old*factor). Increasing weights iteratively instead of setting
# a huge value a-priori leads to better numerical conditions of the
# underlying optimization problem.
weight_adapt_factor: 2.0 # 2.0


## Parallel Planning in distinctive Topologies ##

simple_exploration: false  # false

# Activate parallel planning in distinctive topologies (requires much
# more CPU resources, since multiple trajectories are optimized at once)
enable_homotopy_class_planning: true # true

# Activate multiple threading in order to plan each trajectory in a
# different thread
enable_multithreading: true # true

# Specify the maximum number of distinctive trajectories taken into
# account (limits computational effort)
max_number_classes: 4 # 4

# Specify how much trajectory cost must a new candidate have w.r.t. a
# previously selected trajectory in order to be selected (selection if
# new_cost < old_cost*factor).
selection_cost_hysteresis: 1.0 # 1.0

# Extra scaling of obstacle cost terms just for selecting the 'best'
# candidate.
selection_obst_cost_scale: 100.0 # 100.0

# Extra scaling of via-point cost terms just for selecting the 'best'
# candidate. New in version 0.4
selection_viapoint_cost_scale: 1.0 # 1.0

# If true, time cost (sum of squared time differences) is replaced by
# the total transition time (sum of time differences).
selection_alternative_time_cost: false # false

# Specify the number of samples generated for creating the roadmap graph
roadmap_graph_no_samples: 15 # 15

# Random keypoints/waypoints are sampled in a rectangular region between
# start and goal. Specify the width of that region in meters.
roadmap_graph_area_width: 6 # 6

# Scale internal parameter (H-signature) that is used to distinguish
# between homotopy classes. Warning: reduce this parameter only, if you
# observe problems with too many obstacles in the local cost map, do not
# choose it extremly low, otherwise obstacles cannot be distinguished
# from each other (0.2<value<=1).
h_signature_prescaler: 1.0 # 1.0

# Two H-signatures are assumed to be equal, if both the difference of
# real parts and complex parts are below the specified threshold.
h_signature_threshold: 0.1 # 0.1

# Specify the value of the scalar product between obstacle heading and
# goal heading in order to take them (obstacles) into account for
# exploration.
obstacle_heading_threshold: 1.0 # 1.0

# Visualize the graph that is created for exploring distinctive
# trajectories (check marker message in rviz)
visualize_hc_graph: false # false

# If true, all trajectories of different topologies are attached to the
# set of via-points, otherwise only the trajectory sharing the same
# topology as the initial/global plan is connected with them (no effect
# on test_optim_node). New in version 0.4
viapoints_all_candidates: true # true

# Specify a time duration in seconds that needs to be expired before a
# switch to a new equivalence class is allowed.
switching_blocking_period: 0.0 # 0.0


## Miscellaneous Parameters ##

# Topic name of the odometry message, provided by the robot driver or
# simulator.
odom_topic: "odom" # "odom"

# Global planning frame (in case of a static map, this parameter must be
# usually changed to "/map".
map_frame: "map" # "odom"

###########################################################################################
## NOTE: Costmap conversion is experimental. Its purpose is to combine many point        ##
## obstales into clusters, computed in a separate thread in order to improve the overall ## 
## efficiency of local planning. However, the implemented conversion algorithms are in a ##
## very early stage of development. Contributions are welcome!                           ##
###########################################################################################

## Costmap converter plugin   
costmap_converter_plugin: "costmap_converter::CostmapToDynamicObstacles"
costmap_converter_spin_thread: True
costmap_converter_rate: 5


## Configure plugins (namespace move_base/CostmapToDynamicObstacles)
costmap_converter/CostmapToDynamicObstacles:
  cluster_max_distance: 0.3
  cluster_min_pts: 5
  cluster_max_pts: 15
  convex_hull_min_pt_separation: 0.0
  static_converter_plugin: "costmap_converter::CostmapToPolygonsDBSConcaveHull"

  # ransac_inlier_distance: 0.05
  # ransac_min_inliers: 10
  # ransac_no_iterations: 2000
  # ransac_remainig_outliers: 3
  # ransac_convert_outlier_pts: True
  # ransac_filter_remaining_outlier_pts: False
  # static_converter_plugin: "costmap_converter::CostmapToLinesDBSRANSAC"

  # alpha_slow: 0.3
  # alpha_fast: 0.85
  # beta: 0.85
  # min_sep_between_slow_and_fast_filter: 80
  # min_occupancy_probability: 180
  # max_occupancy_neighbors: 100
  # morph_size: 1
  # filter_by_area: True
  # min_area: 3
  # max_area: 300
  # filter_by_circularity: True
  # min_circularity: 0.2
  # max_circularity: 1.0
  # filter_by_inertia: True
  # min_intertia_ratio: 0.2
  # max_inertia_ratio: 1.0
  # filter_by_convexity: False
  # min_convexity: 0.0
  # max_convexity: 1.0
  # dt: 0.2
  # dist_thresh: 60.0
  # max_allowed_skipped_frames: 3
  # max_trace_length: 10
  # static_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
